{"version":3,"sources":["Locale sync /^/.*/$","Locale/ceb/index.tsx","Locale/en/index.tsx","Locale/tl/index.tsx","Locale/Locale.tsx","Base.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["map","./ceb/","./en/","./tl/","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","r","__webpack_exports__","d","get","home","back","ok","cancel","localeCode","Languages","List","name","active","initLocale","param","alocale","find","value","locale","filter","first","assign","require","Base","_Component","props","_this","classCallCheck","this","langparam","possibleConstructorReturn","getPrototypeOf","call","match","params","lang","inherits","createClass","key","base","concat","basepath","url","react_default","a","createElement","Switch","Route","exact","path","render","Component","App","HashRouter","Base_Base","Boolean","window","location","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e6192a86.chunk.js","sourcesContent":["var map = {\n\t\"./ceb/\": 23,\n\t\"./en/\": 24,\n\t\"./tl/\": 25\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 22;","import { Messages } from '../Locale';\r\n\r\nexport const get: Messages = {\r\n    home: \"balay\",\r\n    back: \"balik\",\r\n    ok: \"gi\",\r\n    cancel: \"aylang\"\r\n}","import { Messages } from '../Locale';\r\n\r\nexport const get: Messages = {\r\n    home: \"home\",\r\n    back: \"back\",\r\n    ok: \"ok\",\r\n    cancel: \"cancel\"\r\n}","import { Messages } from '../Locale';\r\n\r\nexport const get: Messages = {\r\n    home: \"bahay\",\r\n    back: \"balik\",\r\n    ok: \"sige\",\r\n    cancel: \"huwag\"\r\n}","import {List} from \"immutable\";\r\n\r\nexport type Locale = {\r\n    code    : string,\r\n    name    : string,\r\n    active  : boolean\r\n}\r\nexport const Languages: List<Locale> = List([\r\n{  code: \"ceb\",  name : \"Cebuano\",   active: true  },\r\n{  code: \"tl\",   name : \"Tagalog\",   active: true  },\r\n{  code: \"en\",   name : \"English\",   active: true  },\r\n{  code: \"es\",   name : \"Spanish\",   active: false  },\r\n{  code: \"de\",   name : \"German\",    active: false  },\r\n{  code: \"cn\",   name : \"Chinese\",   active: false  }, \r\n{  code: \"jpn\",  name : \"Japanese\",  active: false  }, \r\n{  code: \"kor\",  name : \"Korean\",    active: false  },\r\n])\r\nexport var current: Locale, msg: Messages, localeCode:string;\r\nexport const initLocale:(param?: string)=>void = (param) => {\r\n    const alocale: Locale | undefined = Languages.find((value: Locale) => value.active);\r\n    const locale: Locale = Languages.filter((value: Locale) => value.code === param && value.active).first() || alocale;\r\n    localeCode = locale.code;\r\n    current = Object.assign({},locale);\r\n    msg     = Object.assign({},require('./'+ locale.code +'/').get);\r\n}\r\n// STATIC TEXTS/STRINGS/MESSAGES SHOULD BE DECLARED HERE AND IMPLEMENTED ON ./[code]/index.tsx\r\nexport type Messages = {\r\n    home: string;\r\n    back: string;\r\n    ok: string;\r\n    cancel: string;\r\n    [key: string]: string;\r\n}","import React, { Component } from 'react';\nimport {Switch, Route, RouteComponentProps, Router} from 'react-router-dom';\nimport {initLocale, localeCode} from \"./Locale/Locale\";\n\ntype Props = {} & RouteComponentProps;\nexport class Base extends Component<Props>{\n  constructor(props: RouteComponentProps) {\n    super(props);\n    const langparam: {lang?: string} = this.props.match.params;\n\n    initLocale(langparam.lang);\n  }\n\n  render(){\n    const base = `/${localeCode}`; \n    const basepath = base === this.props.match.url && base || '';\n    \n    return (\n      <div>Welcome to Dino's Blog \n      <Switch>\n        <Route exact path={`${basepath}/`}  render={()=>{return <p>HOME</p>}}/>\n        <Route path={`${basepath}/about`} render={()=>{return <p>ABOUT</p>}}/>\n        <Route path={`${basepath}/contact`}  render={()=>{return <p>CONTACT</p>}}/>\n        <Route path={`${basepath}/blog`}  render={()=>{return <p>BLOG</p>}}/>\n        <Route path={`${basepath}/admin`}  render={()=>{return <p>ADMIN</p>}}/>\n      </Switch>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport {BrowserRouter, HashRouter,Switch, Route} from 'react-router-dom';\nimport { Base } from './Base';\n\nclass App extends Component {\n  render() {\n    {/** SHIFT TO BROWSER ROUTER IF IN PRODUCTION, USE HASHROUTER IF USING GH PAGES */}\n    return (\n      // <BrowserRouter>\n      <HashRouter>\n        <Switch>\n          <Route path={\"/:lang?\"} render={(props) => <Base {...props}/>} />\n        </Switch>\n      </HashRouter>\n      // </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}